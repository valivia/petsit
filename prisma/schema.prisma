// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String? @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String    @unique
  emailVerified DateTime?

  name  String?
  image String?

  // Profile
  firstName String?
  lastName  String?
  bio       String?
  location  String?

  // Permissions
  role     Role    @default(USER)
  isBanned Boolean @default(false)

  // relations
  assets       Asset[]
  pets         Pet[]
  jobs         Job[]     @relation(name: "CreatedJobs")
  acceptedJobs Job[]     @relation(name: "AcceptedJobs")
  Request      Request[]

  // Auth
  Account Account[]
  Session Session[]
}

enum Role {
  ADMIN
  USER
}

// Pet
model Pet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  breed     String?
  bio       String?
  birthDate DateTime?
  type      petType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  jobs Job[]
}

enum petType {
  DOG
  CAT
  BIRD
  OTHER
}

// Job
model Job {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status JobStatus @default(OPEN)
  type   JobType

  title       String
  description String?
  notes       String?
  location    String?

  rate     Float    @default(0)
  rateType RateType @default(HOURLY)

  startDate DateTime
  endDate   DateTime?

  authorId String
  author   User   @relation(name: "CreatedJobs", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  acceptedUserId String?
  acceptedBy     User?   @relation(name: "AcceptedJobs", fields: [acceptedUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  requests Request[]
  pets     Pet[]
  review   Review[]
}

enum RateType {
  HOURLY
  FLAT
}

enum JobStatus {
  OPEN
  ACCEPTED
  CANCELLED
  COMPLETED
}

enum JobType {
  WALK
  SIT
  BOARD
  TRAIN
  OTHER
}

model Request {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, jobId])
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  body  String

  rating Int

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("review")
}

model Asset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum AssetType {
  IMAGE
  VIDEO
}
