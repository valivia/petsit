// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  username String? @map("name")

  profile Profile?
  pets    Pet[]

  jobs         Job[]     @relation(name: "CreatedJobs")
  acceptedJobs Job[]     @relation(name: "AcceptedJobs")
  Request      Request[]
}

model Profile {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String
  bio       String

  assets Asset[]
  user   User    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Pet
model Pet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type petType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  assets Asset[]
  jobs   Job[]
}

enum petType {
  DOG
  CAT
  BIRD
  OTHER
}

// Job
model Job {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status JobStatus @default(PENDING)
  type   JobType

  title      String
  body       String
  notes      String
  hourlyRate Float

  startDate DateTime
  endDate   DateTime

  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User   @relation(name: "CreatedJobs", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  acceptedUserId String?
  acceptedBy     User?   @relation(name: "AcceptedJobs", fields: [acceptedUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  Request Request[]

  review Review[]
}

enum JobStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum JobType {
  WALK
  SIT
  BOARD
  TRAIN
  OTHER
}

model Request {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  body  String

  rating Int

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("review")
}

model Asset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type AssetType

  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?

  Pet   Pet?    @relation(fields: [petId], references: [id])
  petId String?
}

enum AssetType {
  IMAGE
  VIDEO
}
